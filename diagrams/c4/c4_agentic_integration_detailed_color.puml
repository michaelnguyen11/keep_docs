@startuml C4_Agentic_Integration_Detailed_Color
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()
LAYOUT_TOP_DOWN()
LAYOUT_AS_SKETCH()

title "Keep AIOps Platform - Agentic AI Integration (Detailed)"

' Custom styling to distinguish between existing Keep components and new Agentic components
skinparam rectangle {
  BackgroundColor<<Keep>> #lightblue
  BorderColor<<Keep>> #blue
  BackgroundColor<<Agentic>> #lightgreen
  BorderColor<<Agentic>> #green
}

Person(operations_team, "Operations Team", "IT operations personnel monitoring systems and responding to incidents")

Enterprise_Boundary(enterprise, "Enterprise Infrastructure") {
    System_Ext(dynatrace, "Dynatrace", "Enterprise APM and monitoring solution")
    System_Ext(solarwinds, "SolarWinds", "Network and infrastructure monitoring")
    System_Ext(opensearch, "OpenSearch", "Log aggregation and analysis")
    System_Ext(splunk, "Splunk", "Security and operational intelligence platform")
    System_Ext(grafana, "Grafana", "Metrics visualization and dashboarding")
}

System_Boundary(keep_system, "Keep AIOps Platform") {
    Container(provider_system, "Provider System", "Python/FastAPI", "Integrates with external monitoring systems, ingests alerts and metrics")<<Keep>>
    
    Container(alerting_system, "Alert Processing System", "Python", "Receives, deduplicates, and processes incoming alerts")<<Keep>>
    
    Container(ml_engine, "ML Engine", "Python/Sklearn/TensorFlow", "Applies machine learning algorithms for alert correlation and anomaly detection")<<Keep>>
    
    Container(rules_engine, "Rules Engine", "Python", "Applies user-defined rules for alert correlation and incident classification")<<Keep>>
    
    Container(incident_manager, "Incident Management", "Python", "Creates and manages incidents based on correlated alerts")<<Keep>>
    
    Container(workflow_engine, "Workflow Engine", "Python", "Executes automated workflows for incident response")<<Keep>>
    
    Container(database, "Database", "PostgreSQL/MySQL/SQLite", "Stores alerts, incidents, workflows, and configuration")<<Keep>>
    
    Container(keep_api, "Keep API", "Python/FastAPI", "RESTful API for platform interaction")<<Keep>>
    
    Container(keep_ui, "Keep UI", "React/Next.js", "Web interface for platform management and visualization")<<Keep>>
}

System_Boundary(agentic_system, "Agentic AI System") {
    Container(agent_provider, "Agent Provider", "Python/LangGraph", "Manages agent capabilities and interfaces with Keep")<<Agentic>>
    
    Container(tool_registry, "Tool Registry", "Python", "Manages tools that agents can use to interact with systems")<<Agentic>>
    
    Container(preprocessing_pipeline, "Log Preprocessing Pipeline", "Python", "Processes and summarizes filtered logs for agent consumption")<<Agentic>>
    
    Container(context_assembler, "Context Assembler", "Python", "Assembles relevant context from various sources for agent analysis")<<Agentic>>
    
    Container(orchestrator_agent, "Orchestrator Agent", "Python/LangGraph", "Coordinates specialized agents and validates results")<<Agentic>>
    
    Container(incident_analysis_agent, "Incident Analysis Agent", "Python/LangGraph", "Specialized agent for detailed incident analysis")<<Agentic>>
    
    Container(root_cause_agent, "Root Cause Analysis Agent", "Python/LangGraph", "Specialized agent for determining incident root causes")<<Agentic>>
    
    Container(remediation_agent, "Remediation Suggestion Agent", "Python/LangGraph", "Specialized agent for suggesting remediation steps")<<Agentic>>
    
    Container(agent_memory, "Agent Memory Store", "Vector Database", "Stores agent observations, reasoning, and knowledge")<<Agentic>>
    
    Container(feedback_system, "Human Feedback System", "Python", "Collects and processes human feedback on agent actions")<<Agentic>>
}

' Add a legend
legend right
  |= Component Type |= Description |
  |<back:#lightblue>| Keep Platform (Existing) |
  |<back:#lightgreen>| Agentic AI Add-on (New) |
endlegend

' External monitoring systems to Keep
Rel(dynatrace, provider_system, "Sends alerts and metrics", "API")
Rel(solarwinds, provider_system, "Sends alerts and metrics", "API")
Rel(opensearch, provider_system, "Sends logs and events", "API")
Rel(splunk, provider_system, "Sends security events", "API")
Rel(grafana, provider_system, "Sends metrics and dashboards", "API")

' Keep internal connections
Rel(provider_system, alerting_system, "Forwards alerts")
Rel(alerting_system, ml_engine, "Sends alerts for analysis")
Rel(alerting_system, rules_engine, "Sends alerts for rule application")
Rel(ml_engine, incident_manager, "Creates incidents based on correlated alerts")
Rel(rules_engine, incident_manager, "Creates incidents based on rule matches")
Rel(incident_manager, workflow_engine, "Triggers automated workflows")
Rel_Back(incident_manager, database, "Stores and retrieves data")
Rel_Back(workflow_engine, database, "Stores and retrieves workflow states")
Rel(keep_api, database, "Reads and writes data")
Rel(keep_ui, keep_api, "Makes API calls", "HTTPS")
Rel(operations_team, keep_ui, "Uses", "HTTPS")

' Integration points between Keep and Agentic System
Rel(ml_engine, preprocessing_pipeline, "Forwards filtered logs and anomalies", "REST API")
Rel(incident_manager, agent_provider, "Requests incident analysis", "REST API")
Rel(workflow_engine, agent_provider, "Executes agent-enhanced workflows", "REST API")
Rel_Back(agent_provider, keep_api, "Retrieves additional context", "REST API")
Rel(agent_provider, database, "Reads incident and alert data")

' Agentic System internal connections
Rel(agent_provider, tool_registry, "Uses tools")
Rel(agent_provider, orchestrator_agent, "Delegates tasks")
Rel(preprocessing_pipeline, context_assembler, "Provides processed data")
Rel(context_assembler, orchestrator_agent, "Provides incident context")
Rel(orchestrator_agent, incident_analysis_agent, "Delegates analysis")
Rel(orchestrator_agent, root_cause_agent, "Delegates root cause analysis")
Rel(orchestrator_agent, remediation_agent, "Delegates remediation suggestions")
Rel_Back(incident_analysis_agent, orchestrator_agent, "Returns analysis results")
Rel_Back(root_cause_agent, orchestrator_agent, "Returns root cause findings")
Rel_Back(remediation_agent, orchestrator_agent, "Returns remediation suggestions")
Rel_Back(orchestrator_agent, agent_provider, "Returns validated results")
Rel(incident_analysis_agent, agent_memory, "Reads/writes observations")
Rel(root_cause_agent, agent_memory, "Reads/writes observations")
Rel(remediation_agent, agent_memory, "Reads/writes observations")
Rel(operations_team, feedback_system, "Provides feedback on agent actions")
Rel(feedback_system, agent_memory, "Stores feedback for learning")
Rel(tool_registry, keep_api, "Makes API calls to Keep", "REST API")

@enduml 