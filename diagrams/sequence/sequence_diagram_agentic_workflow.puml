@startuml Agentic_Workflow_Execution

title Agentic Workflow Execution - Keep AIOps Platform

actor "SRE Engineer" as SRE
participant "Keep UI" as UI
participant "API Server" as API
participant "Workflow Engine" as WorkflowEngine
participant "Agent Provider" as AgentProvider
participant "LangGraph Runtime" as LangGraph
participant "Tool Registry" as ToolRegistry
participant "Provider System" as ProviderSystem
participant "Memory Store" as MemoryStore
participant "LLM Service" as LLM
participant "External Services" as External

== Alert Reception and Workflow Trigger ==

External -> API: Send Alert (Webhook)
activate API
API -> WorkflowEngine: Process Alert
activate WorkflowEngine

WorkflowEngine -> WorkflowEngine: Match Workflow Trigger
WorkflowEngine -> WorkflowEngine: Initialize Context
WorkflowEngine -> WorkflowEngine: Create Workflow Run

== Agent-Enhanced Alert Enrichment ==

WorkflowEngine -> AgentProvider: enrich_alert(alert_data, context)
activate AgentProvider

AgentProvider -> MemoryStore: retrieve_related_memories(alert)
activate MemoryStore
MemoryStore --> AgentProvider: related_memories
deactivate MemoryStore

AgentProvider -> LangGraph: initialize_agent(alert, memories)
activate LangGraph

LangGraph -> ToolRegistry: get_available_tools()
activate ToolRegistry
ToolRegistry --> LangGraph: tool_definitions
deactivate ToolRegistry

loop Agent Reasoning
    LangGraph -> LLM: generate_next_step(state)
    activate LLM
    LLM --> LangGraph: tool_selection
    deactivate LLM
    
    alt Tool Execution Required
        LangGraph -> ToolRegistry: execute_tool(tool_name, parameters)
        activate ToolRegistry
        
        ToolRegistry -> ProviderSystem: call_provider_action(provider, action, params)
        activate ProviderSystem
        ProviderSystem -> External: API Call
        activate External
        External --> ProviderSystem: Response
        deactivate External
        ProviderSystem --> ToolRegistry: result
        deactivate ProviderSystem
        
        ToolRegistry --> LangGraph: tool_result
        deactivate ToolRegistry
        
        LangGraph -> LLM: analyze_result(tool_result)
        activate LLM
        LLM --> LangGraph: next_action
        deactivate LLM
    end
end

LangGraph -> MemoryStore: store_observations(observations)
activate MemoryStore
MemoryStore --> LangGraph: success
deactivate MemoryStore

LangGraph --> AgentProvider: enrichment_result
deactivate LangGraph

AgentProvider -> AgentProvider: Format Results
AgentProvider --> WorkflowEngine: enriched_alert
deactivate AgentProvider

WorkflowEngine -> WorkflowEngine: Update Context with Enrichment

== Incident Classification and Analysis ==

WorkflowEngine -> AgentProvider: analyze_incident(alert, context)
activate AgentProvider

AgentProvider -> LangGraph: initialize_agent(incident_data)
activate LangGraph

LangGraph -> LLM: classify_incident(data)
activate LLM
LLM --> LangGraph: classification
deactivate LLM

LangGraph -> LLM: assess_severity(data)
activate LLM
LLM --> LangGraph: severity_assessment
deactivate LLM

LangGraph -> LLM: identify_affected_systems(data)
activate LLM
LLM --> LangGraph: affected_systems
deactivate LLM

LangGraph -> LLM: generate_summary(classification, severity, systems)
activate LLM
LLM --> LangGraph: incident_summary
deactivate LLM

LangGraph --> AgentProvider: analysis_results
deactivate LangGraph

AgentProvider --> WorkflowEngine: incident_analysis
deactivate AgentProvider

WorkflowEngine -> WorkflowEngine: Update Context with Analysis

== Human Review and Feedback ==

WorkflowEngine -> UI: Update Incident with Agent Analysis
UI -> SRE: Display Incident Details & Analysis

SRE -> UI: Provide Feedback on Analysis
UI -> API: Submit Feedback
API -> AgentProvider: store_feedback(feedback_data)
activate AgentProvider
AgentProvider -> MemoryStore: store_feedback(feedback)
MemoryStore --> AgentProvider: success
AgentProvider --> API: feedback_stored
deactivate AgentProvider

== Remediation Actions ==

SRE -> UI: Approve Suggested Actions
UI -> API: Approve Action
API -> WorkflowEngine: Execute Approved Action

WorkflowEngine -> ProviderSystem: execute_action(action, params)
activate ProviderSystem
ProviderSystem -> External: API Call
activate External
External --> ProviderSystem: Response
deactivate External
ProviderSystem --> WorkflowEngine: action_result
deactivate ProviderSystem

WorkflowEngine -> API: Update Workflow Run Status
API -> UI: Update Incident Status
UI -> SRE: Display Updated Incident Status

== Workflow Completion ==

WorkflowEngine -> API: Complete Workflow Run
deactivate WorkflowEngine
API -> UI: Update Incident Resolution
deactivate API
UI -> SRE: Show Resolution Summary

@enduml 