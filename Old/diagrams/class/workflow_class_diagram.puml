@startuml Workflow_Class_Diagram

title Keep AIOps Platform - Workflow System Classes

!theme plain
skinparam linetype ortho
skinparam ClassBackgroundColor WhiteSmoke
skinparam ClassBorderColor Black
skinparam ClassFontColor Black
skinparam NoteBackgroundColor LightYellow
skinparam NoteBorderColor Black

' Core Workflow Classes
class Workflow {
  +workflow_id: str
  +workflow_name: str
  +workflow_owners: List[str]
  +workflow_tags: List[str]
  +workflow_interval: int
  +workflow_triggers: List[dict]
  +workflow_steps: List[Step]
  +workflow_actions: List[Step]
  +workflow_description: str
  +workflow_disabled: bool
  +workflow_strategy: WorkflowStrategy
  +context_manager: ContextManager
  +run_steps()
  +run_action(action: Step): (bool, str, bool)
  +run_actions(): (list, list)
  +run(workflow_execution_id)
  +check_run_permissions(workflow_permissions, user_email, user_role): bool
}

enum WorkflowStrategy {
  NONPARALLEL
  NONPARALLEL_WITH_RETRY
  PARALLEL
}

class WorkflowManager {
  -instance: WorkflowManager
  -workflows: Dict[str, Workflow]
  -context_manager: ContextManager
  -logger: Logger
  +load_workflow(workflow_id, workflow_yaml): Workflow
  +get_workflow(workflow_id): Workflow
  +get_workflows(): List[Workflow]
  +run_workflow(workflow_id, workflow_execution_id)
  +run_workflow_with_event(event, workflow_ids)
  +validate_workflow_yaml(workflow_yaml): bool
}

class WorkflowScheduler {
  -workflows: Dict[str, Dict]
  -scheduler: BackgroundScheduler
  -running_workflows: Dict[str, Set[str]]
  +add_workflow(workflow_id, interval)
  +remove_workflow(workflow_id)
  +update_workflow(workflow_id, interval)
  +get_schedules(): Dict[str, Dict]
  +start()
  +shutdown()
  -_run_workflow(workflow_id)
}

class WorkflowStore {
  -workflows_dir: str
  -tenant_id: str
  -logger: Logger
  +init_store()
  +get_workflow_path(workflow_id): str
  +get_workflow_yaml(workflow_id): str
  +save_workflow_yaml(workflow_id, workflow_yaml)
  +delete_workflow(workflow_id)
  +get_all_workflow_ids(): List[str]
  +get_all_workflow_yamls(): Dict[str, str]
}

' Step-related Classes
class Step {
  +step_id: str
  +name: str
  +continue_to_next_step: bool
  +context_manager: ContextManager
  +run(): bool
}

class IOHandler {
  -context_manager: ContextManager
  +write_context(key, value)
  +read_context(key): Any
  +read_all_context(): Dict
}

class ContextManager {
  -event_context: Dict
  -alert_context: Dict
  -incident_context: Dict
  -execution_context: Dict
  -consts_context: Dict
  -secret_context: Dict
  -logger: Logger
  +set_event_context(event)
  +set_alert_context(alert)
  +set_incident_context(incident)
  +set_execution_context(workflow_id, execution_id)
  +set_consts_context(consts)
  +set_secret_context()
  +get_context(): Dict
  +read_context(path): Any
  +write_context(path, value)
}

' Provider-related Classes
class ProviderFactory {
  +get_provider(provider_type, provider_id, provider_config): Provider
}

interface Provider {
  +provider_id: str
  +validate_config(): bool
  +test_connection(): bool
  +dispose()
}

' Relationships
Workflow "1" *-- "*" Step : contains
Workflow --> WorkflowStrategy
Workflow --> ContextManager : uses

WorkflowManager "1" *-- "*" Workflow : manages
WorkflowManager --> ContextManager : uses
WorkflowManager --> WorkflowStore : uses for persistence
WorkflowManager --> WorkflowScheduler : uses for scheduling

Step --> ContextManager : uses
Step --> IOHandler : uses for I/O
Step --> ProviderFactory : uses to get providers

ContextManager <-- IOHandler : uses

note right of Workflow
  Core unit of automation
  Contains steps and actions
  that run in sequence
end note

note right of WorkflowManager
  Manages workflow lifecycle:
  - Loading
  - Validation
  - Execution
end note

note right of Step
  Atomic unit of execution
  Can interact with external
  systems via providers
end note

note bottom of ContextManager
  Stores and manages context:
  - Event data
  - Alert information
  - Incident details
  - Execution state
  - Constants and secrets
end note

@enduml 