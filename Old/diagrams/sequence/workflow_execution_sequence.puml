@startuml Workflow_Execution_Sequence

title Keep AIOps Platform - Workflow Execution Sequence

!theme plain
skinparam SequenceBoxBackgroundColor WhiteSmoke
skinparam SequenceBoxBorderColor Black
skinparam ParticipantBackgroundColor WhiteSmoke
skinparam ParticipantBorderColor Black
skinparam NoteBackgroundColor LightYellow
skinparam NoteBorderColor Black

actor "User or System" as Trigger
participant "API\nEndpoint" as API
participant "WorkflowManager" as Manager
participant "WorkflowScheduler" as Scheduler
participant "ARQ\nQueue" as Queue
participant "BackgroundWorker" as Worker
participant "Workflow" as WF
participant "ContextManager" as Context
participant "Step" as Step
participant "ProviderFactory" as ProviderFactory
participant "Provider" as Provider
participant "External\nSystem" as External

== Workflow Triggering ==

alt Scheduled Trigger
  Scheduler -> Manager: run_workflow(workflow_id)
  activate Manager
else Manual Trigger
  Trigger -> API: POST /api/workflows/{workflow_id}/run
  activate API
  API -> Manager: run_workflow(workflow_id)
  activate Manager
else Event Trigger
  Trigger -> API: POST /api/events
  activate API
  API -> Manager: run_workflow_with_event(event, workflow_ids)
  activate Manager
end alt

Manager -> Context: set_event_context(event)
activate Context
Context --> Manager: Context set
deactivate Context

Manager -> Queue: enqueue_job(workflow_execution)
activate Queue
Queue --> Manager: Job queued
deactivate Queue

alt Manual Trigger
  Manager --> API: Workflow execution initiated
  API --> Trigger: HTTP Response (202 Accepted)
  deactivate API
end alt

deactivate Manager

== Workflow Execution ==

Queue -> Worker: process_job(workflow_execution)
activate Worker
Worker -> Manager: get_workflow(workflow_id)
activate Manager
Manager --> Worker: Workflow instance
deactivate Manager

Worker -> WF: run(workflow_execution_id)
activate WF

WF -> Context: set_execution_context(workflow_id, execution_id)
activate Context
Context --> WF: Execution context set
deactivate Context

note right of WF
  First execute all steps, 
  then if successful, 
  execute all actions
end note

== Step Execution ==

WF -> WF: run_steps()
activate WF

loop for each step in workflow_steps
  WF -> Step: run()
  activate Step
  
  Step -> Context: read_context(path)
  activate Context
  Context --> Step: Context value
  deactivate Context
  
  alt Provider Step
    Step -> ProviderFactory: get_provider(provider_type, provider_id, config)
    activate ProviderFactory
    ProviderFactory --> Step: Provider instance
    deactivate ProviderFactory
    
    Step -> Provider: provider_operation()
    activate Provider
    Provider -> External: Make API call
    activate External
    External --> Provider: API response
    deactivate External
    Provider --> Step: Operation result
    deactivate Provider
  else Condition Step
    Step -> Step: evaluate_condition()
  else Function Step
    Step -> Step: execute_function()
  end alt
  
  Step -> Context: write_context(path, value)
  activate Context
  Context --> Step: Context updated
  deactivate Context
  
  alt Step continues workflow
    Step --> WF: true (continue)
  else Step stops workflow
    Step --> WF: false (stop)
    WF -> WF: break
  end alt
  
  deactivate Step
end loop

WF -> WF: run_actions()
activate WF

== Action Execution ==

loop for each action in workflow_actions
  WF -> Step: run()
  activate Step
  
  Step -> Context: read_context(path)
  activate Context
  Context --> Step: Context value
  deactivate Context
  
  alt Provider Action
    Step -> ProviderFactory: get_provider(provider_type, provider_id, config)
    activate ProviderFactory
    ProviderFactory --> Step: Provider instance
    deactivate ProviderFactory
    
    Step -> Provider: provider_operation()
    activate Provider
    Provider -> External: Make API call
    activate External
    External --> Provider: API response
    deactivate External
    Provider --> Step: Operation result
    deactivate Provider
  else Function Action
    Step -> Step: execute_function()
  end alt
  
  Step -> Context: write_context(path, value)
  activate Context
  Context --> Step: Context updated
  deactivate Context
  
  alt Action continues workflow
    Step --> WF: true, null, false (continue)
  else Action stops workflow
    Step --> WF: true, null, true (stop)
    WF -> WF: break
  end alt
  
  deactivate Step
end loop

deactivate WF
deactivate WF

alt Error in execution
  WF -> WF: handle_on_failure()
  activate WF
  
  WF -> Step: run() [on_failure step]
  activate Step
  Step --> WF: Failure handling result
  deactivate Step
  
  deactivate WF
end alt

WF --> Worker: Execution complete
deactivate WF

Worker -> Manager: record_execution_result(workflow_id, execution_id, result)
activate Manager
Manager --> Worker: Result recorded
deactivate Manager

Worker --> Queue: Job completed
deactivate Worker

@enduml 